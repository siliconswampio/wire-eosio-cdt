// Declares clang::SyntaxOnlyAction.
#include "clang/Frontend/FrontendActions.h"
#include "clang/Tooling/CommonOptionsParser.h"
#include "clang/Tooling/Tooling.h"
#include "clang/ASTMatchers/ASTMatchers.h"
#include "clang/ASTMatchers/ASTMatchFinder.h"
#include "clang/AST/DeclCXX.h"
#include "clang/AST/DeclTemplate.h"
#include "clang/AST/Expr.h"
#include "clang/Basic/Builtins.h"
#include "llvm/Support/FileSystem.h"
#include "eosio/utils.hpp"
#include "eosio/gen.hpp"
#include "eosio/whereami/whereami.hpp"
#include "eosio/abi.hpp"

#include <exception>
#include <iostream>
#include <fstream>
#include <sstream>
#include <memory>
#include <set>
#include <map>
#include <chrono>
#include <ctime>

#include <jsoncons/json.hpp>

#include "llvm/Support/CommandLine.h"
using namespace clang::tooling;
using namespace clang::ast_matchers;
using namespace llvm;
using namespace eosio;
using namespace eosio::cdt;
using jsoncons::json;
using jsoncons::ojson;

struct abidiff_exception : public std::exception {
   virtual const char* what() const throw() {
      return "eosio.abidiff fatal error";
   }
} abidiff_ex;


class abidiff {
   private:
      ojson abi_1, abi_2;
      std::string fn_1, fn_2;
   public:
      abidiff( const std::string& fn1, const std::string& fn2) {
         llvm::SmallString<128> _fn1, _fn2;
         if (!llvm::sys::fs::real_path(fn1, _fn1, true)) {
            std::ifstream in(_fn1.str().str());
            fn_1 = _fn1.str().str();
            abi_1 = ojson::parse(in);
         } else {
            std::cerr << "Error, invalid filepath { " << _fn1.str().str() << " }\n";
            throw abidiff_ex;
         }

         if (!llvm::sys::fs::real_path(fn2, _fn2, true)) {
            std::ifstream in(_fn2.str().str());
            fn_2 = _fn2.str().str();
            abi_2 = ojson::parse(in);
         } else {
            std::cerr << "Error, invalid filepath { " << _fn2.str().str() << " }\n";
            throw abidiff_ex;
         }

      }
      
      int get_version(const ojson& abi) {
         std::string ver = abi["version"].as<std::string>();
         return (std::stod(ver.substr(ver.size()-3))*10);
      }

      void diff_version() {
         if (get_version(abi_1) != get_version(abi_2)) {
            std::cout << "< version\n\t";
            std::cout << abi_1["version"] << "\n";
            std::cout << "> version\n\t";
            std::cout << abi_2["version"] << "\n";
         }
      }
      
      void print_struct(const ojson& abi, int index, char direction) {
         std::cout << direction << " struct\n";
         std::cout << pretty_print(abi["structs"].at(index)) << "\n";
      }
      
      ojson get_base_type(const ojson& abi, const ojson& type) {
         for (int i=0; i < abi["types"].size(); i++) {
            if (abi["types"].at(i)["new_type_name"] == type)
               return abi["types"].at(i)["new_type_name"];
         } 
         return type;
      }
      void find_structs(const ojson& abi1, const ojson& abi2, char direction) {
         for ( int i=0; i < abi1["structs"].size(); i++ ) {
            bool found = false;
            for ( int j=0; j < abi2["structs"].size(); j++ ) {
               if (abi1["structs"].at(i)["name"] == abi2["structs"].at(j)["name"]) {
                  if (abi1["structs"].at(i)["fields"].size() != abi2["structs"].at(j)["fields"].size())
                     break;
                  if (abi1["structs"].at(i)["base"] != abi2["structs"].at(j)["base"])
                     break;
                  
                  bool _found = false;
                  for (int k=0; k < abi1["structs"].at(i)["fields"].size(); k++) {
                     if (abi1["structs"].at(i)["fields"].at(k)["name"] != abi2["structs"].at(j)["fields"].at(k)["name"] ||
                         abi1["structs"].at(i)["fields"].at(k)["type"] != abi2["structs"].at(j)["fields"].at(k)["type"])
                        break;
                     _found = true;
                  }
                  found = _found;
               }
            }
            if (!found)
               print_struct(abi1, i, direction);
         }
      }

      void print_type(const ojson& abi, int index, char direction) {
         std::cout << direction << " type\n";
         std::cout << pretty_print(abi["types"].at(index)) << "\n";
      }

      void find_types(const ojson& abi1, const ojson& abi2, char direction) {
         for ( int i=0; i < abi1["types"].size(); i++ ) {
            bool found = false;
            for ( int j=0; j < abi2["types"].size(); j++ ) {
               if (abi1["types"].at(i)["new_type_name"] == abi2["types"].at(j)["new_type_name"]) {
                  if (abi1["types"].at(i)["type"] != abi2["types"].at(j)["type"])
                     break;
                  found = true;
               }
            }
            if (!found)
               print_type(abi1, i, direction);
         }
      }

      void print_action(const ojson& abi, int index, char direction) {
         std::cout << direction << " action\n";
         std::cout << pretty_print(abi["actions"].at(index)) << "\n";
      }

      void find_actions(const ojson& abi1, const ojson& abi2, char direction) {
         for ( int i=0; i < abi1["actions"].size(); i++ ) {
            bool found = false;
            for ( int j=0; j < abi2["actions"].size(); j++ ) {
               if (abi1["actions"].at(i)["name"] == abi2["actions"].at(j)["name"]) {
                  if (abi1["actions"].at(i)["type"] != abi2["actions"].at(j)["type"])
                     break;
                  if (abi1["actions"].at(i)["ricardian_contract"] != abi2["actions"].at(j)["ricardian_contract"])
                     break;
                  found = true;
               }
            }
            if (!found)
               print_action(abi1, i, direction);
         }
      }

      void print_table(const ojson& abi, int index, char direction) {
         std::cout << direction << " table\n";
         std::cout << pretty_print(abi["tables"].at(index)) << "\n";
      }

      void find_tables(const ojson& abi1, const ojson& abi2, char direction) {
         for ( int i=0; i < abi1["tables"].size(); i++ ) {
            bool found = false;
            for ( int j=0; j < abi2["tables"].size(); j++ ) {
               if (abi1["tables"].at(i)["name"] == abi2["tables"].at(j)["name"]) {
                  if (abi1["tables"].at(i)["type"] != abi2["tables"].at(j)["type"])
                     break;
                  found = true;
               }
            }
            if (!found)
               print_table(abi1, i, direction);
         }
      }

      void print_clause(const ojson& abi, int index, char direction) {
         std::cout << direction << " clause\n";
         std::cout << pretty_print(abi["clauses"].at(index)) << "\n";
      }

      void find_clauses(const ojson& abi1, const ojson& abi2, char direction) {
         for ( int i=0; i < abi1["ricardian_clauses"].size(); i++ ) {
            bool found = false;
            for ( int j=0; j < abi2["ricardian_clauses"].size(); j++ ) {
               if (abi1["ricardian_clauses"].at(i)["id"] == abi2["ricardian_clauses"].at(j)["id"]) {
                  if (abi1["ricardian_clauses"].at(i)["body"] != abi2["ricardian_clauses"].at(j)["body"])
                     break;
                  found = true;
               }
            }
            if (!found)
               print_clause(abi1, i, direction);
         }
      }

      void print_variant(const ojson& abi, int index, char direction) {
         std::cout << direction << " variant\n";
         std::cout << pretty_print(abi["variants"].at(index)) << "\n";
      }

      void find_variants(const ojson& abi1, const ojson& abi2, char direction) {
         for ( int i=0; i < abi1["variants"].size(); i++ ) {
            bool found = false;
            for ( int j=0; j < abi2["variants"].size(); j++ ) {
               if (abi1["variants"].at(i)["name"] == abi2["variants"].at(j)["name"]) {
                  for (int k=0; k < abi1["variants"].at(i)["types"].size(); k++)
                     if (abi1["variants"].at(i)["types"].at(k) != abi2["variants"].at(j)["types"].at(k))
                        break;
                  found = true;
               }

            }
            if (!found)
               print_variant(abi1, i, direction);
         }
      }

      void diff_structs() {
         find_structs(abi_1, abi_2, '<');
         find_structs(abi_2, abi_1, '>');
      }

      void diff_types() {
         find_types(abi_1, abi_2, '<');
         find_types(abi_2, abi_1, '>');
      }

      void diff_actions() {
         find_actions(abi_1, abi_2, '<');
         find_actions(abi_2, abi_1, '>');
      }

      void diff_tables() {
         find_tables(abi_1, abi_2, '<');
         find_tables(abi_2, abi_1, '>');
      }

      void diff_clauses() {
         find_clauses(abi_1, abi_2, '<');
         find_clauses(abi_2, abi_1, '>');
      }

      void diff_variants() {
         find_variants(abi_1, abi_2, '<');
         find_variants(abi_2, abi_1, '>');
      }

      void diff() {
         diff_version();
         diff_structs();
         diff_types();
         diff_actions();
         diff_tables();
         diff_clauses();
         if ( get_version(abi_1) >= 11 && get_version(abi_2) >= 11 )
            diff_variants();
      }
};

int main(int argc, const char **argv) {

   cl::SetVersionPrinter([](llvm::raw_ostream& os) {
        os << "eosio-abidiff version " << "${VERSION_FULL}" << "\n";
  });
   cl::OptionCategory cat("eosio-abidiff", "generates an abi from C++ project input");

   cl::opt<std::string> input_filename1(
      cl::Positional, 
      cl::desc("<input file1> ..."), 
      cl::Required,
      cl::cat(cat));
   cl::opt<std::string> input_filename2(
      cl::Positional, 
      cl::desc("<input file2> ..."), 
      cl::Required,
      cl::cat(cat));

   cl::ParseCommandLineOptions(argc, argv, std::string("eosio-abidiff"));
   try {
      abidiff diff(input_filename1, input_filename2);
      diff.diff();
   } catch ( std::exception& e ) {
      std::cout << e.what() << "\n";
      return -1;
   }
   
   return 0;
}
